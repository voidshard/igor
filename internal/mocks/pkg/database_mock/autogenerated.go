// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/database/interface.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/database/interface.go -destination=internal/mocks/./pkg/database_mock/autogenerated.go -package=database_mock
//
// Package database_mock is a generated GoMock package.
package database_mock

import (
	reflect "reflect"

	changes "github.com/voidshard/igor/pkg/database/changes"
	structs "github.com/voidshard/igor/pkg/structs"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockDatabase) Changes() (changes.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(changes.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Changes indicates an expected call of Changes.
func (mr *MockDatabaseMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockDatabase)(nil).Changes))
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// InsertJob mocks base method.
func (m *MockDatabase) InsertJob(j *structs.Job, ls []*structs.Layer, ts []*structs.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertJob", j, ls, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertJob indicates an expected call of InsertJob.
func (mr *MockDatabaseMockRecorder) InsertJob(j, ls, ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertJob", reflect.TypeOf((*MockDatabase)(nil).InsertJob), j, ls, ts)
}

// InsertTasks mocks base method.
func (m *MockDatabase) InsertTasks(in []*structs.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTasks", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTasks indicates an expected call of InsertTasks.
func (mr *MockDatabaseMockRecorder) InsertTasks(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTasks", reflect.TypeOf((*MockDatabase)(nil).InsertTasks), in)
}

// Jobs mocks base method.
func (m *MockDatabase) Jobs(q *structs.Query) ([]*structs.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs", q)
	ret0, _ := ret[0].([]*structs.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Jobs indicates an expected call of Jobs.
func (mr *MockDatabaseMockRecorder) Jobs(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockDatabase)(nil).Jobs), q)
}

// Layers mocks base method.
func (m *MockDatabase) Layers(q *structs.Query) ([]*structs.Layer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Layers", q)
	ret0, _ := ret[0].([]*structs.Layer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Layers indicates an expected call of Layers.
func (mr *MockDatabaseMockRecorder) Layers(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Layers", reflect.TypeOf((*MockDatabase)(nil).Layers), q)
}

// SetJobsStatus mocks base method.
func (m *MockDatabase) SetJobsStatus(status structs.Status, newTag string, ids []*structs.ObjectRef) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJobsStatus", status, newTag, ids)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetJobsStatus indicates an expected call of SetJobsStatus.
func (mr *MockDatabaseMockRecorder) SetJobsStatus(status, newTag, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJobsStatus", reflect.TypeOf((*MockDatabase)(nil).SetJobsStatus), status, newTag, ids)
}

// SetLayersPaused mocks base method.
func (m *MockDatabase) SetLayersPaused(at int64, newTag string, ids []*structs.ObjectRef) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLayersPaused", at, newTag, ids)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLayersPaused indicates an expected call of SetLayersPaused.
func (mr *MockDatabaseMockRecorder) SetLayersPaused(at, newTag, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLayersPaused", reflect.TypeOf((*MockDatabase)(nil).SetLayersPaused), at, newTag, ids)
}

// SetLayersStatus mocks base method.
func (m *MockDatabase) SetLayersStatus(status structs.Status, newTag string, ids []*structs.ObjectRef) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLayersStatus", status, newTag, ids)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLayersStatus indicates an expected call of SetLayersStatus.
func (mr *MockDatabaseMockRecorder) SetLayersStatus(status, newTag, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLayersStatus", reflect.TypeOf((*MockDatabase)(nil).SetLayersStatus), status, newTag, ids)
}

// SetTaskQueueID mocks base method.
func (m *MockDatabase) SetTaskQueueID(taskID, etag, newEtag, queueTaskID string, newState structs.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskQueueID", taskID, etag, newEtag, queueTaskID, newState)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskQueueID indicates an expected call of SetTaskQueueID.
func (mr *MockDatabaseMockRecorder) SetTaskQueueID(taskID, etag, newEtag, queueTaskID, newState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskQueueID", reflect.TypeOf((*MockDatabase)(nil).SetTaskQueueID), taskID, etag, newEtag, queueTaskID, newState)
}

// SetTasksPaused mocks base method.
func (m *MockDatabase) SetTasksPaused(at int64, newTag string, ids []*structs.ObjectRef) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTasksPaused", at, newTag, ids)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTasksPaused indicates an expected call of SetTasksPaused.
func (mr *MockDatabaseMockRecorder) SetTasksPaused(at, newTag, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTasksPaused", reflect.TypeOf((*MockDatabase)(nil).SetTasksPaused), at, newTag, ids)
}

// SetTasksStatus mocks base method.
func (m *MockDatabase) SetTasksStatus(status structs.Status, newTag string, ids []*structs.ObjectRef, msg ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{status, newTag, ids}
	for _, a := range msg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTasksStatus", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTasksStatus indicates an expected call of SetTasksStatus.
func (mr *MockDatabaseMockRecorder) SetTasksStatus(status, newTag, ids any, msg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{status, newTag, ids}, msg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTasksStatus", reflect.TypeOf((*MockDatabase)(nil).SetTasksStatus), varargs...)
}

// Tasks mocks base method.
func (m *MockDatabase) Tasks(q *structs.Query) ([]*structs.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tasks", q)
	ret0, _ := ret[0].([]*structs.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tasks indicates an expected call of Tasks.
func (mr *MockDatabaseMockRecorder) Tasks(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tasks", reflect.TypeOf((*MockDatabase)(nil).Tasks), q)
}

// MockQueueDB is a mock of QueueDB interface.
type MockQueueDB struct {
	ctrl     *gomock.Controller
	recorder *MockQueueDBMockRecorder
}

// MockQueueDBMockRecorder is the mock recorder for MockQueueDB.
type MockQueueDBMockRecorder struct {
	mock *MockQueueDB
}

// NewMockQueueDB creates a new mock instance.
func NewMockQueueDB(ctrl *gomock.Controller) *MockQueueDB {
	mock := &MockQueueDB{ctrl: ctrl}
	mock.recorder = &MockQueueDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueDB) EXPECT() *MockQueueDBMockRecorder {
	return m.recorder
}

// SetTaskState mocks base method.
func (m *MockQueueDB) SetTaskState(task *structs.Task, st structs.Status, msg string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskState", task, st, msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTaskState indicates an expected call of SetTaskState.
func (mr *MockQueueDBMockRecorder) SetTaskState(task, st, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskState", reflect.TypeOf((*MockQueueDB)(nil).SetTaskState), task, st, msg)
}

// Tasks mocks base method.
func (m *MockQueueDB) Tasks(ids []string) ([]*structs.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tasks", ids)
	ret0, _ := ret[0].([]*structs.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tasks indicates an expected call of Tasks.
func (mr *MockQueueDBMockRecorder) Tasks(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tasks", reflect.TypeOf((*MockQueueDB)(nil).Tasks), ids)
}
