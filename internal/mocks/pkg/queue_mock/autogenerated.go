// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/queue/interface.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/queue/interface.go -destination=internal/mocks/./pkg/queue_mock/autogenerated.go -package=queue_mock
//
// Package queue_mock is a generated GoMock package.
package queue_mock

import (
	reflect "reflect"

	queue "github.com/voidshard/igor/pkg/queue"
	structs "github.com/voidshard/igor/pkg/structs"
	gomock "go.uber.org/mock/gomock"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQueue) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueueMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueue)(nil).Close))
}

// Enqueue mocks base method.
func (m *MockQueue) Enqueue(task *structs.Task) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", task)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockQueueMockRecorder) Enqueue(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockQueue)(nil).Enqueue), task)
}

// Kill mocks base method.
func (m *MockQueue) Kill(queuedTaskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kill", queuedTaskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill.
func (mr *MockQueueMockRecorder) Kill(queuedTaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockQueue)(nil).Kill), queuedTaskID)
}

// Register mocks base method.
func (m *MockQueue) Register(task string, handler func([]*queue.Meta) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", task, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockQueueMockRecorder) Register(task, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockQueue)(nil).Register), task, handler)
}

// Run mocks base method.
func (m *MockQueue) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockQueueMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockQueue)(nil).Run))
}
